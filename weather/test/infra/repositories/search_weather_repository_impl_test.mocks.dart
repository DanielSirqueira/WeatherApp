// Mocks generated by Mockito 5.3.0 from annotations
// in weather/test/infra/repositories/search_weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/domain/entities/city_weather.dart' as _i2;
import 'package:weather/infra/datasources/search_weather_datasource.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCityWeather_0 extends _i1.SmartFake implements _i2.CityWeather {
  _FakeCityWeather_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [SearchWeatherDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchWeatherDatasource extends _i1.Mock
    implements _i3.SearchWeatherDatasource {
  MockSearchWeatherDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CityWeather> getSearch(String? city) => (super.noSuchMethod(
          Invocation.method(#getSearch, [city]),
          returnValue: _i4.Future<_i2.CityWeather>.value(
              _FakeCityWeather_0(this, Invocation.method(#getSearch, [city]))))
      as _i4.Future<_i2.CityWeather>);
}
